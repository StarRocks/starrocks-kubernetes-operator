apiVersion: starrocks.com/v1
kind: StarRocksCluster
metadata:
  name: {{ template "starrockscluster.name" . }}
  namespace: {{ template "starrockscluster.namespace" . }}
  labels:
    cluster: {{ template "starrockscluster.name" . }}
{{- include "starrockscluster.labels" . | nindent 4 }}
{{- if .Values.starrocksCluster.annotations }}
  annotations:
    {{ toYaml .Values.starrocksCluster.annotations | nindent 4 }}
{{- end }}
spec:
  starRocksFeSpec:
    image: "{{ .Values.starrocksFESpec.image.repository }}:{{ .Values.starrocksFESpec.image.tag }}"
    replicas: {{ .Values.starrocksFESpec.replicas }}
    {{- /*
    support both resources and resource for backward compatibility
    */}}
    {{- if .Values.starrocksFESpec.resources }}
    {{- toYaml .Values.starrocksFESpec.resources | nindent 4 }}
    {{- else if .Values.starrocksFESpec.resource }}
    {{- toYaml .Values.starrocksFESpec.resource | nindent 4 }}
    {{- end }}
    {{- if .Values.starrocksFESpec.service.type }}
    service:
      type: {{ .Values.starrocksFESpec.service.type }}
      {{- if and (eq "LoadBalancer" .Values.starrocksFESpec.service.type) .Values.starrocksFESpec.service.loadbalancerIP }}
      loadBalancerIP: {{ .Values.starrocksFESpec.service.loadbalancerIP }}
      {{- end }}
      {{- if .Values.starrocksFESpec.service.ports }}
      ports:
        {{- toYaml .Values.starrocksFESpec.service.ports | nindent 8 }}
      {{- end }}
      {{- if or .Values.starrocksFESpec.service.annotations .Values.datadog.metrics.enabled }}
      annotations:
        {{- if .Values.datadog.metrics.enabled }}
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{- default 8030 (include "starrockscluster.fe.http.port" .) }}"
        prometheus.io/scrape: "true"
        {{- end }}
        {{- if .Values.starrocksFESpec.service.annotations}}
        {{- toYaml .Values.starrocksFESpec.service.annotations | nindent 8 }}
        {{- end }}
      {{- end }}
    {{- end }}
    annotations:
      app.starrocks.io/fe-config-hash: {{template "starrockscluster.fe.config.hash" . }}
      {{- if .Values.datadog.log.enabled }}
      {{- if eq (trimAll " {}" .Values.datadog.log.logConfig) "" }}
      ad.datadoghq.com/fe.logs: '[{"service":"starrocks","source":"fe"}]'
      {{- else }}
      ad.datadoghq.com/fe.logs: {{ printf "[%s]" (printf "{%s, \"source\": \"fe\", \"service\": \"starrocks\"}" (trimAll " {}" .Values.datadog.log.logConfig) | fromJson | toJson) | squote }}
      {{- end }}
      {{- end }}
{{- if .Values.starrocksFESpec.annotations }}
{{ toYaml .Values.starrocksFESpec.annotations | indent 6 }}
{{- end }}
{{- if .Values.starrocksFESpec.imagePullSecrets }}
    imagePullSecrets:
{{toYaml .Values.starrocksFESpec.imagePullSecrets | indent 4 }}
{{- end }}
{{- if .Values.starrocksFESpec.serviceAccount }}
    serviceAccount: {{ .Values.starrocksFESpec.serviceAccount }}
{{- end }}
    runAsNonRoot: {{ .Values.starrocksFESpec.runAsNonRoot }}
{{- if .Values.starrocksFESpec.nodeSelector }}
    nodeSelector:
{{ toYaml .Values.starrocksFESpec.nodeSelector | indent 6 }}
{{- end }}
{{- if .Values.starrocksFESpec.podLabels }}
    podLabels:
{{toYaml .Values.starrocksFESpec.podLabels | indent 6 }}
{{- end }}
{{- if .Values.starrocksFESpec.hostAliases }}
    hostAliases:
{{toYaml .Values.starrocksFESpec.hostAliases | indent 4 }}
{{- end }}
{{- if .Values.starrocksFESpec.schedulerName }}
    schedulerName: {{ .Values.starrocksFESpec.schedulerName }}
{{- end }}
    feEnvVars:
      - name: TZ
        value: {{ .Values.timeZone }}
      {{- if .Values.datadog.log.enabled }}
      - name: LOG_CONSOLE
        value: "1"
      {{- end }}
      {{- if and .Values.initPassword.enabled (.Values.starrocksFESpec.feEnvVars | toJson | contains "MYSQL_PWD" | not) }}
      - name: "MYSQL_PWD"
        valueFrom:
          secretKeyRef:
            name: {{ template "starrockscluster.initpassword.secret.name" . }}
            key: password
      {{- end }}
      {{- if .Values.starrocksFESpec.feEnvVars }}
      {{- /* if it is a map, we use range to iterate to merge environment variables */}}
      {{- if eq (kindOf .Values.starrocksFESpec.feEnvVars) "map" }}
      {{- range $key, $value := .Values.starrocksFESpec.feEnvVars }}
      - name: {{ $key }}
        {{- if eq (kindOf $value) "string" }}
        value: {{ $value | quote }}
        {{- else }}
        {{- toYaml $value | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      {{- /* the default kind is slice, we keep backward compatibility */}}
      {{- toYaml .Values.starrocksFESpec.feEnvVars | nindent 6 }}
      {{- end }}
      {{- end }}
{{- if .Values.starrocksFESpec.affinity }}
    affinity:
{{ toYaml .Values.starrocksFESpec.affinity | indent 6 }}
{{- end }}
{{- if .Values.starrocksFESpec.tolerations }}
    tolerations:
{{toYaml .Values.starrocksFESpec.tolerations | indent 4 }}
{{- end }}
    terminationGracePeriodSeconds: {{ .Values.starrocksFESpec.terminationGracePeriodSeconds }}
    {{- if .Values.starrocksFESpec.startupProbeFailureSeconds }}
    startupProbeFailureSeconds: {{ .Values.starrocksFESpec.startupProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksFESpec.livenessProbeFailureSeconds }}
    livenessProbeFailureSeconds: {{ .Values.starrocksFESpec.livenessProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksFESpec.readinessProbeFailureSeconds }}
    readinessProbeFailureSeconds: {{ .Values.starrocksFESpec.readinessProbeFailureSeconds }}
    {{- end }}
{{- if .Values.starrocksFESpec.secrets }}
    secrets:
    {{- range .Values.starrocksFESpec.secrets }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      subPath: {{ .subPath }}
    {{- end }}
{{- end }}
{{- if .Values.starrocksFESpec.configMaps }}
    configMaps:
    {{- range .Values.starrocksFESpec.configMaps }}
      - name: {{ .name }}
        mountPath: {{ .mountPath }}
        subPath: {{ .subPath }}
    {{- end }}
{{- end }}
    configMapInfo:
      configMapName: {{ template  "starrockscluster.fe.configmap.name" . }}
      resolveKey: fe.conf
    {{- if or .Values.starrocksFESpec.storageSpec.name .Values.starrocksFESpec.emptyDirs }}
    storageVolumes:
    {{- if .Values.starrocksFESpec.storageSpec.name }}
    - name: {{ .Values.starrocksFESpec.storageSpec.name }}{{ template "starrockscluster.fe.meta.suffix" . }}
      storageClassName: {{ .Values.starrocksFESpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksFESpec.storageSpec.storageSize }}"
      mountPath: {{ template "starrockscluster.fe.meta.path" . }}
    - name: {{ .Values.starrocksFESpec.storageSpec.name }}{{ template "starrockscluster.fe.log.suffix" . }}
      storageClassName: {{ .Values.starrocksFESpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksFESpec.storageSpec.logStorageSize }}"
      mountPath: {{ template "starrockscluster.fe.log.path" . }}
    {{- end }}
    {{- if .Values.starrocksFESpec.emptyDirs }}
    {{- range .Values.starrocksFESpec.emptyDirs }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      storageClassName: "emptyDir"
    {{- end }}
    {{- end }}
    {{- end }}

{{- if .Values.starrocksCluster.enabledBe }}
  starRocksBeSpec:
    image: "{{ .Values.starrocksBeSpec.image.repository }}:{{ .Values.starrocksBeSpec.image.tag }}"
    replicas: {{ .Values.starrocksBeSpec.replicas }}
    {{- /*
    support both resources and resource for backward compatibility
    */}}
    {{- if .Values.starrocksBeSpec.resources }}
    {{- toYaml .Values.starrocksBeSpec.resources | nindent 4 }}
    {{- else if .Values.starrocksBeSpec.resource }}
    {{- toYaml .Values.starrocksBeSpec.resource | nindent 4 }}
    {{- end }}
    {{- if .Values.starrocksBeSpec.service.type }}
    service:
      type: {{ .Values.starrocksBeSpec.service.type }}
      {{- if and (eq "LoadBalancer" .Values.starrocksBeSpec.service.type) .Values.starrocksBeSpec.service.loadbalancerIP }}
      loadBalancerIP: {{ .Values.starrocksBeSpec.service.loadbalancerIP }}
      {{- end }}
      {{- if .Values.starrocksBeSpec.service.ports }}
      ports:
        {{- toYaml .Values.starrocksBeSpec.service.ports | nindent 8 }}
      {{- end }}
      {{- if or .Values.starrocksBeSpec.service.annotations .Values.datadog.metrics.enabled }}
      annotations:
        {{- if .Values.datadog.metrics.enabled }}
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{- default 8040 (include "starrockscluster.be.webserver.port" .) }}"
        prometheus.io/scrape: "true"
        {{- end }}
        {{- if .Values.starrocksBeSpec.service.annotations }}
        {{- toYaml .Values.starrocksBeSpec.service.annotations | nindent 8 }}
        {{- end }}
      {{- end }}
    {{- end }}
    annotations:
      app.starrocks.io/be-config-hash: {{template "starrockscluster.be.config.hash" . }}
      {{- if .Values.datadog.log.enabled }}
      {{- if eq (trimAll " {}" .Values.datadog.log.logConfig) "" }}
      ad.datadoghq.com/be.logs: '[{"service":"starrocks","source":"be"}]'
      {{- else }}
      ad.datadoghq.com/be.logs: {{ printf "[%s]" (printf "{%s, \"source\": \"be\", \"service\": \"starrocks\"}" (trimAll " {}" .Values.datadog.log.logConfig) | fromJson | toJson) | squote }}
      {{- end }}
      {{- end }}
{{- if .Values.starrocksBeSpec.annotations }}
{{ toYaml .Values.starrocksBeSpec.annotations | indent 6 }}
{{- end }}
{{- if .Values.starrocksBeSpec.imagePullSecrets }}
    imagePullSecrets:
{{toYaml .Values.starrocksBeSpec.imagePullSecrets | indent 4 }}
{{- end }}
{{- if .Values.starrocksBeSpec.serviceAccount }}
    serviceAccount: {{ .Values.starrocksBeSpec.serviceAccount }}
{{- end }}
    runAsNonRoot: {{ .Values.starrocksBeSpec.runAsNonRoot }}
{{- if .Values.starrocksBeSpec.capabilities }}
    capabilities:
{{toYaml .Values.starrocksBeSpec.capabilities | indent 6 }}
{{- end }}
{{- if .Values.starrocksBeSpec.podLabels }}
    podLabels:
{{toYaml .Values.starrocksBeSpec.podLabels | indent 6 }}
{{- end }}
{{- if .Values.starrocksBeSpec.hostAliases }}
    hostAliases:
{{toYaml .Values.starrocksBeSpec.hostAliases | indent 4 }}
{{- end }}
{{- if .Values.starrocksBeSpec.schedulerName }}
    schedulerName: {{ .Values.starrocksBeSpec.schedulerName }}
{{- end }}
{{- if .Values.starrocksBeSpec.nodeSelector }}
    nodeSelector:
{{ toYaml .Values.starrocksBeSpec.nodeSelector | indent 6 }}
{{- end }}
    beEnvVars:
      - name: TZ
        value: {{ .Values.timeZone }}
      {{- if .Values.datadog.log.enabled }}
      - name: LOG_CONSOLE
        value: "1"
      {{- end }}
      {{- if and .Values.initPassword.enabled (.Values.starrocksBeSpec.beEnvVars | toJson | contains "MYSQL_PWD" | not) }}
      - name: "MYSQL_PWD"
        valueFrom:
          secretKeyRef:
            name: {{ template "starrockscluster.initpassword.secret.name" . }}
            key: password
      {{- end }}
      {{- if .Values.starrocksBeSpec.beEnvVars }}
      {{- /* if it is a map, we use range to iterate to merge environment variables */}}
      {{- if eq (kindOf .Values.starrocksBeSpec.beEnvVars) "map" }}
      {{- range $key, $value := .Values.starrocksBeSpec.beEnvVars }}
      - name: {{ $key }}
        {{- if eq (kindOf $value) "string" }}
        value: {{ $value | quote }}
        {{- else }}
        {{- toYaml $value | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      {{- /* the default kind is slice, we keep backward compatibility */}}
      {{- toYaml .Values.starrocksBeSpec.beEnvVars | nindent 6 }}
      {{- end }}
      {{- end }}
{{- if .Values.starrocksBeSpec.affinity }}
    affinity:
{{ toYaml .Values.starrocksBeSpec.affinity | indent 6 }}
{{- end }}
{{- if .Values.starrocksBeSpec.tolerations }}
    tolerations:
{{toYaml .Values.starrocksBeSpec.tolerations | indent 4 }}
{{- end }}
    terminationGracePeriodSeconds: {{ .Values.starrocksBeSpec.terminationGracePeriodSeconds }}
    {{- if .Values.starrocksBeSpec.startupProbeFailureSeconds }}
    startupProbeFailureSeconds: {{ .Values.starrocksBeSpec.startupProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksBeSpec.livenessProbeFailureSeconds }}
    livenessProbeFailureSeconds: {{ .Values.starrocksBeSpec.livenessProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksBeSpec.readinessProbeFailureSeconds }}
    readinessProbeFailureSeconds: {{ .Values.starrocksBeSpec.readinessProbeFailureSeconds }}
    {{- end }}
{{- if .Values.starrocksBeSpec.secrets }}
    secrets:
    {{- range .Values.starrocksBeSpec.secrets }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      subPath: {{ .subPath }}
    {{- end }}
{{- end }}
{{- if .Values.starrocksBeSpec.configMaps }}
    configMaps:
    {{- range .Values.starrocksBeSpec.configMaps }}
      - name: {{ .name }}
        mountPath: {{ .mountPath }}
        subPath: {{ .subPath }}
    {{- end }}
{{- end }}
    configMapInfo:
      configMapName: {{template "starrockscluster.be.configmap.name" . }}
      resolveKey: be.conf
    {{- if or .Values.starrocksBeSpec.storageSpec.name .Values.starrocksBeSpec.emptyDirs }}
    {{- if .Values.starrocksBeSpec.storageSpec.name }}
    storageVolumes:
    - name: {{ .Values.starrocksBeSpec.storageSpec.name }}{{template "starrockscluster.be.data.suffix" . }}
      storageClassName: {{ .Values.starrocksBeSpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksBeSpec.storageSpec.storageSize }}"
      mountPath: {{template "starrockscluster.be.data.path" . }}
    - name: {{ .Values.starrocksBeSpec.storageSpec.name }}{{template "starrockscluster.be.log.suffix" . }}
      storageClassName: {{ .Values.starrocksBeSpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksBeSpec.storageSpec.logStorageSize }}"
      mountPath: {{template "starrockscluster.be.log.path" . }}
    {{- end }}
    {{- if .Values.starrocksBeSpec.emptyDirs }}
    {{- range .Values.starrocksBeSpec.emptyDirs }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      storageClassName: "emptyDir"
    {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
{{- if .Values.starrocksCluster.enabledCn }}
  starRocksCnSpec:
    image: "{{ .Values.starrocksCnSpec.image.repository }}:{{ .Values.starrocksCnSpec.image.tag }}"
    {{- if .Values.starrocksCnSpec.replicas }}
    replicas: {{ .Values.starrocksCnSpec.replicas }}
    {{- end }}
{{- if .Values.starrocksCnSpec.serviceAccount }}
    serviceAccount: {{ .Values.starrocksCnSpec.serviceAccount }}
{{- end }}
    runAsNonRoot: {{ .Values.starrocksCnSpec.runAsNonRoot }}
{{- if .Values.starrocksCnSpec.podLabels }}
    podLabels:
{{toYaml .Values.starrocksCnSpec.podLabels | indent 6 }}
{{- end }}
{{- if .Values.starrocksCnSpec.hostAliases }}
    hostAliases:
{{toYaml .Values.starrocksCnSpec.hostAliases | indent 4 }}
{{- end }}
{{- if .Values.starrocksCnSpec.schedulerName }}
    schedulerName: {{ .Values.starrocksCnSpec.schedulerName }}
{{- end }}
{{- if .Values.starrocksCnSpec.nodeSelector }}
    nodeSelector:
{{ toYaml .Values.starrocksCnSpec.nodeSelector | indent 6 }}
{{- end }}
    cnEnvVars:
      - name: TZ
        value: {{ .Values.timeZone }}
      {{- if .Values.datadog.log.enabled }}
      - name: LOG_CONSOLE
        value: "1"
      {{- end }}
      {{- if and .Values.initPassword.enabled (.Values.starrocksCnSpec.cnEnvVars | toJson | contains "MYSQL_PWD" | not) }}
      - name: "MYSQL_PWD"
        valueFrom:
          secretKeyRef:
            name: {{ template "starrockscluster.initpassword.secret.name" . }}
            key: password
      {{- end }}
      {{- if .Values.starrocksCnSpec.cnEnvVars }}
      {{- /* if it is a map, we use range to iterate to merge environment variables */}}
      {{- if eq (kindOf .Values.starrocksCnSpec.cnEnvVars) "map" }}
      {{- range $key, $value := .Values.starrocksCnSpec.cnEnvVars }}
      - name: {{ $key }}
        {{- if eq (kindOf $value) "string" }}
        value: {{ $value | quote }}
        {{- else }}
        {{- toYaml $value | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      {{- /* the default kind is slice, we keep backward compatibility */}}
      {{- toYaml .Values.starrocksCnSpec.cnEnvVars | nindent 6 }}
      {{- end }}
      {{- end }}

{{- if .Values.starrocksCnSpec.affinity }}
    affinity:
{{ toYaml .Values.starrocksCnSpec.affinity | indent 6 }}
{{- end }}
{{- if .Values.starrocksCnSpec.tolerations }}
    tolerations:
{{toYaml .Values.starrocksCnSpec.tolerations | indent 4 }}
{{- end }}
    terminationGracePeriodSeconds: {{ .Values.starrocksCnSpec.terminationGracePeriodSeconds }}
    {{- if .Values.starrocksCnSpec.startupProbeFailureSeconds }}
    startupProbeFailureSeconds: {{ .Values.starrocksCnSpec.startupProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksCnSpec.livenessProbeFailureSeconds }}
    livenessProbeFailureSeconds: {{ .Values.starrocksCnSpec.livenessProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksCnSpec.readinessProbeFailureSeconds }}
    readinessProbeFailureSeconds: {{ .Values.starrocksCnSpec.readinessProbeFailureSeconds }}
    {{- end }}
{{- if and .Values.starrocksCluster.enabledCn .Values.starrocksCnSpec.autoScalingPolicy }}
    autoScalingPolicy:
{{ toYaml .Values.starrocksCnSpec.autoScalingPolicy | indent 6 }}
{{- end }}
    {{- /*
    support both resources and resource for backward compatibility
    */}}
    {{- if .Values.starrocksCnSpec.resources }}
    {{- toYaml .Values.starrocksCnSpec.resources | nindent 4 }}
    {{- else if .Values.starrocksCnSpec.resource }}
    {{- toYaml .Values.starrocksCnSpec.resource | nindent 4 }}
    {{- end }}
    {{- if .Values.starrocksCnSpec.service.type }}
    service:
      type: {{ .Values.starrocksCnSpec.service.type }}
      {{- if and (eq "LoadBalancer" .Values.starrocksCnSpec.service.type) .Values.starrocksCnSpec.service.loadbalancerIP }}
      loadBalancerIP: {{ .Values.starrocksCnSpec.service.loadbalancerIP }}
      {{- end }}
      {{- if .Values.starrocksCnSpec.service.ports }}
      ports:
        {{- toYaml .Values.starrocksCnSpec.service.ports | nindent 8 }}
      {{- end }}
      {{- if or .Values.starrocksCnSpec.service.annotations .Values.datadog.metrics.enabled }}
      annotations:
        {{- if .Values.datadog.metrics.enabled }}
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{- default 8040 (include "starrockscluster.cn.webserver.port" .) }}"
        prometheus.io/scrape: "true"
        {{- end }}
        {{- if .Values.starrocksCnSpec.service.annotations }}
        {{- toYaml .Values.starrocksCnSpec.service.annotations | nindent 8 }}
        {{- end }}
      {{- end }}
    {{- end }}
    annotations:
      app.starrocks.io/cn-config-hash: {{template "starrockscluster.cn.config.hash" . }}
      {{- if .Values.datadog.log.enabled }}
      {{- if eq (trimAll " {}" .Values.datadog.log.logConfig) "" }}
      ad.datadoghq.com/cn.logs: '[{"service":"starrocks","source":"cn"}]'
      {{- else }}
      ad.datadoghq.com/cn.logs: {{ printf "[%s]" (printf "{%s, \"source\": \"cn\", \"service\": \"starrocks\"}" (trimAll " {}" .Values.datadog.log.logConfig) | fromJson | toJson) | squote }}
      {{- end }}
      {{- end }}
{{- if .Values.starrocksCnSpec.annotations }}
{{ toYaml .Values.starrocksCnSpec.annotations | indent 6 }}
{{- end }}
{{- if .Values.starrocksCnSpec.imagePullSecrets }}
    imagePullSecrets:
{{toYaml .Values.starrocksCnSpec.imagePullSecrets | indent 4 }}
{{- end }}
{{- if .Values.starrocksCnSpec.secrets }}
    secrets:
    {{- range .Values.starrocksCnSpec.secrets }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      subPath: {{ .subPath }}
    {{- end }}
{{- end }}
{{- if .Values.starrocksCnSpec.configMaps }}
    configMaps:
    {{- range .Values.starrocksCnSpec.configMaps }}
      - name: {{ .name }}
        mountPath: {{ .mountPath }}
        subPath: {{ .subPath }}
    {{- end }}
{{- end }}
    configMapInfo:
      configMapName: {{template  "starrockscluster.cn.configmap.name" . }}
      resolveKey: cn.conf
    {{- if or .Values.starrocksCnSpec.storageSpec.name .Values.starrocksCnSpec.emptyDirs }}
    storageVolumes:
    {{- if .Values.starrocksCnSpec.storageSpec.name }}
    - name: {{ .Values.starrocksCnSpec.storageSpec.name }}{{template "starrockscluster.cn.data.suffix" . }}
      storageClassName: {{ .Values.starrocksCnSpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksCnSpec.storageSpec.storageSize }}"
      mountPath: {{template "starrockscluster.cn.data.path" . }}
    - name: {{ .Values.starrocksCnSpec.storageSpec.name }}{{template "starrockscluster.cn.log.suffix" . }}
      storageClassName: {{ .Values.starrocksCnSpec.storageSpec.storageClassName }}
      storageSize: "{{ .Values.starrocksCnSpec.storageSpec.logStorageSize }}"
      mountPath: {{template "starrockscluster.cn.log.path" . }}
    {{- end }}
    {{- if .Values.starrocksCnSpec.emptyDirs }}
    {{- range .Values.starrocksCnSpec.emptyDirs }}
    - name: {{ .name }}
      mountPath: {{ .mountPath }}
      storageClassName: "emptyDir"
    {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}

  {{- if .Values.starrocksFeProxySpec.enabled }}
  starRocksFeProxySpec:
    {{- if .Values.starrocksFeProxySpec.image.repository }}
    image: "{{ .Values.starrocksFeProxySpec.image.repository }}:{{ .Values.starrocksFeProxySpec.image.tag }}"
    {{- end }}
    replicas: {{ .Values.starrocksFeProxySpec.replicas }}
    resolver: {{ .Values.starrocksFeProxySpec.resolver }}
    {{- if .Values.starrocksFeProxySpec.resources }}
      {{- toYaml .Values.starrocksFeProxySpec.resources | nindent 4 }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.service.type }}
    service:
      type: {{ .Values.starrocksFeProxySpec.service.type }}
      {{- if and (eq "LoadBalancer" .Values.starrocksFeProxySpec.service.type) .Values.starrocksFeProxySpec.service.loadbalancerIP }}
      loadBalancerIP: {{ .Values.starrocksFeProxySpec.service.loadbalancerIP }}
      {{- end }}
      {{- if .Values.starrocksFeProxySpec.service.ports }}
      ports:
        {{- toYaml .Values.starrocksFeProxySpec.service.ports | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.nodeSelector }}
    nodeSelector:
      {{- toYaml .Values.starrocksFeProxySpec.nodeSelector | nindent 6 }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.affinity }}
    affinity:
      {{- toYaml .Values.starrocksFeProxySpec.affinity | nindent 6 }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.tolerations }}
    tolerations:
      {{- toYaml .Values.starrocksFeProxySpec.tolerations | nindent 6 }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.livenessProbeFailureSeconds }}
    livenessProbeFailureSeconds: {{ .Values.starrocksFeProxySpec.livenessProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.readinessProbeFailureSeconds }}
    readinessProbeFailureSeconds: {{ .Values.starrocksFeProxySpec.readinessProbeFailureSeconds }}
    {{- end }}
    {{- if .Values.starrocksFeProxySpec.emptyDirs }}
    storageVolumes:
    {{- range .Values.starrocksFeProxySpec.emptyDirs }}
    - name: {{ .name }}
      storageClassName: "emptyDir"
      mountPath: {{ .mountPath }}
    {{- end }}
    {{- end }}
  {{- end }}
